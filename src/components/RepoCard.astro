---
import { Icon } from 'astro-icon/components';

export interface Props {
    slug: string;
    title: string;
    official?: boolean;
}

const { slug, title, official = false } = Astro.props;
---

<a href={`https://github.com/crowdin/${slug}`} target="_blank" class="no-underline">
    <div id={slug} class="repo-card block p-4 rounded-lg duration-200 hover:-translate-y-1 hover:shadow-lg">
        {official && (
            <div class="mb-2">
                <div class="inline-block bg-accent-600 text-white text-sm py-1 pe-1 ps-3 rounded-2xl">
                    <span>Official</span>
                    <Icon name="mdi:checkbox-marked-circle" class="inline-icon align-bottom size-5" />
                </div>
            </div>
        )}

        <div class="flex items-center h-8 gap-x-2">
            <img src={`/images/client-card/${slug}.png`} class="w-10 no-shadow" alt={title} />
            <h5 class="text-lg font-semibold !mt-0">{title}</h5>
        </div>

        <div class="flex flex-row gap-x-4 text-md text-gray-500 dark:text-gray-300">
            <span>
                <Icon name="mdi:star" class="inline-icon align-middle size-4" />
                <span class="stars inline-flex align-middle font-semibold"><span class="animate-pulse w-8 bg-slate-200 rounded" /></span>
            </span>

            <span>
                <Icon name="mdi:source-fork" class="inline-icon align-middle size-4" />
                <span class="forks inline-flex align-middle font-semibold"><span class="animate-pulse w-8 bg-slate-200 rounded" /></span>
            </span>
        </div>
        <p>View and Install</p>
    </div>
</a>

<style>
    .repo-card {
      border: 1px solid var(--sl-color-gray-5);
      border-radius: 0.5rem;
      padding: 1rem;
      box-shadow: var(--sl-shadow-sm);
    }

    .repo-card:hover {
      background: var(--sl-color-gray-7, var(--sl-color-gray-6));
      border-color: var(--sl-color-gray-2);
    }
</style>

<script is:inline define:vars={{slug}}>
    async function fetchRepoData(repoSlug) {
        try {
            // Fetch GitHub stars data
            const starsResponse = await fetch(`https://img.shields.io/github/stars/crowdin/${repoSlug}`);
            const starsText = await starsResponse.text();
            const starsSvg = new DOMParser().parseFromString(starsText, "image/svg+xml");

            // Fetch GitHub forks data
            const forksResponse = await fetch(`https://img.shields.io/github/forks/crowdin/${repoSlug}`);
            const forksText = await forksResponse.text();
            const forksSvg = new DOMParser().parseFromString(forksText, "image/svg+xml");

            return {
                stars: +starsSvg.querySelector('#rlink').textContent,
                forks: +forksSvg.querySelector('#rlink').textContent,
            };
        } catch (error) {
            console.error('Error fetching repo data:', error);
        }
    }

    const repoElement = document.getElementById(slug);

    fetchRepoData(slug).then(response => {
        repoElement.querySelector('.stars').innerHTML = `<span>${response.stars}</span>`;
        repoElement.querySelector('.forks').innerHTML = `<span>${response.forks}</span>`;
    })
</script>
